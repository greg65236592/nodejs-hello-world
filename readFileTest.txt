### Copy from api doc for testing

fs.readFile(file[, options], callback)#
History
file <string> | <Buffer> | <integer> filename or file descriptor
options <Object> | <string>
encoding <string> | <null> default = null
flag <string> default = 'r'
callback <Function>
Asynchronously reads the entire contents of a file. Example:

fs.readFile('/etc/passwd', (err, data) => {
  if (err) throw err;
  console.log(data);
});
The callback is passed two arguments (err, data), where data is the contents of the file.

If no encoding is specified, then the raw buffer is returned.

If options is a string, then it specifies the encoding. Example:

fs.readFile('/etc/passwd', 'utf8', callback);
Any specified file descriptor has to support reading.

Note: If a file descriptor is specified as the file, it will not be closed automatically.

fs.readFileSync(file[, options])#
History
file <string> | <Buffer> | <integer> filename or file descriptor
options <Object> | <string>
encoding <string> | <null> default = null
flag <string> default = 'r'
Synchronous version of fs.readFile. Returns the contents of the file.

If the encoding option is specified then this function returns a string. Otherwise it returns a buffer.

